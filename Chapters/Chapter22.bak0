\chapter{Comprehensive Accessibility Audit of Office Suites for Screen Reader Accessibility}
\label{cha:comprehensive-accessibility-audit-of-office-suites-for-screen-reader-accessibility}

A comprehensive accessibility audit\index{accessibility!accessibility testing} of office suites is crucial to ensure that individuals who rely on screen readers\index{screen reader} can effectively create, edit, and consume digital documents. This chapter provides a detailed guide on conducting such an audit, covering fundamental principles, built-in accessibility\index{accessibility} features, external auditing tools, and common accessibility failures\index{accessibility!common accessibility failures}.

\section{Fundamental Principles and Relevant Accessibility Standards}
\label{sec:fundamental-principles-and-relevant-accessibility-standards}

Before diving into the specifics of an audit, it is essential to understand the foundational principles and standards that govern digital accessibility\index{digital accessibility}. These guidelines provide a framework\index{laptop!Framework} for creating content that is perceivable, operable, understandable\index{accessibility!accessibility principles}, and robust for all users, including those with disabilities.

\subsection{Web Content Accessibility Guidelines (WCAG)}
\label{sub:web-content-accessibility-guidelines-wcag}

The Web Content Accessibility Guidelines\index{WCAG} (WCAG) are the most widely recognized international standard for web accessibility. Although primarily focused on web content, its principles are highly applicable to documents created in office suites. WCAG is organized around four main principles (POUR):

\begin{itemize}
	\item \textbf{Perceivable:} Information and user interface components must be presentable to users in ways they can perceive. This includes providing text alternatives for non-text content and ensuring content is distinguishable.
	\item \textbf{Operable:} User interface components and navigation must be operable. This means all functionality should be available from a keyboard, and users must have enough time to read and use content.
	\item \textbf{Understandable:} Information and the operation of the user interface must be understandable. This involves making text readable and understandable and making content appear and operate in predictable ways.
	\item \textbf{Robust:} Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies\index{assistive technology}.
\end{itemize}

\subsection{Section 508 of the Rehabilitation Act}
\label{sub:section-508-of-the-rehabilitation-act}

In the United States, Section 508\index{accessibility!legal accessibility} of the Rehabilitation Act requires federal agencies to make their electronic and information technology\index{technology} (EIT) accessible to people with disabilities. The standards for Section 508 are based on WCAG 2.0\index{WCAG} Level AA, making WCAG a critical benchmark for compliance.

\subsection{Accessible Rich Internet Applications (ARIA)}
\label{sub:accessible-rich-internet-applications-aria}

ARIA\index{accessibility!ARIA} is a set of attributes that can be added to HTML elements to improve the accessibility\index{accessibility} of web content and applications. While more relevant to web-based office suites like Google Workspace\index{office suite!Google Workspace}, understanding ARIA roles, states, and properties can be beneficial for auditing complex interactive elements.

\section{Built-in Accessibility Features and Checkers}
\label{sec:built-in-accessibility-features-and-checkers}

Most modern office suites include built-in tools to help authors create accessible documents. An essential part of an accessibility audit\index{accessibility!accessibility testing} is to evaluate the effectiveness and usability of these features.

\subsection{Microsoft Office (Word, Excel, PowerPoint)}
\label{sub:microsoft-office-word-excel-powerpoint}

Microsoft Office\index{office suite!Microsoft Office} has a robust set of accessibility features, including:

\begin{itemize}
	\item \textbf{Accessibility Checker:} This tool, available in Word, Excel, and PowerPoint, inspects the document for common accessibility\index{accessibility} issues, such as missing alternative text\index{images and media!alternative text}, unclear link text, and incorrect reading order\index{PDF!reading order}. It provides feedback and instructions on how to fix the identified problems.
	\item \textbf{Alt Text Pane:} A dedicated pane for adding and editing alternative text for images, charts, and other objects.
	\item \textbf{Styles and Headings\index{Markdown!headings}:} Proper use of heading styles in Word and slide layouts\index{presentations!accessible presentations} in PowerPoint ensures a logical document structure\index{document structure} that screen readers\index{screen reader} can navigate.
	\item \textbf{Table Headers\index{Markdown!accessible tables}:} The ability to specify header rows in tables allows screen readers\index{screen reader} to announce column and row headers, providing context for data cells.
\end{itemize}

\subsection{Google Workspace (Docs, Sheets, Slides)}
\label{sub:google-workspace-docs-sheets-slides}

Google Workspace\index{office suite!Google Workspace} also offers several accessibility\index{accessibility} features, though they can be less comprehensive than those in Microsoft Office:

\begin{itemize}
	\item \textbf{Accessibility Checker (via add-on):} While not built-in by default, add-ons like Grackle Docs, Sheets, and Slides can be used to check for accessibility issues.
	\item \textbf{Alt Text:} Google Docs, Sheets, and Slides allow users to add alt text to images.
	\item \textbf{Semantic Structure:} Using built-in headings in Docs and title/layout slides in Slides helps create a structured document.
	\item \textbf{Screen Reader Support:} Google\index{tablet!Google} actively works on improving support for screen readers like NVDA, JAWS, and VoiceOver\index{screen reader!VoiceOver} across its applications.
\end{itemize}

\subsection{LibreOffice\index{office suite!LibreOffice} (Writer, Calc, Impress)}
\label{sub:libreoffice-writer-calc-impress}

LibreOffice, a popular open-source \gls{officesuite}, includes \gls{accessibility} features as well:

\begin{itemize}
	\item \textbf{Accessibility Check Tool:} An experimental feature that can be enabled to check for common accessibility problems.
	\item \textbf{Alternative Text:} Options to add alt text\index{images and media!alternative text} to images and objects.
	\item \textbf{Styles and Formatting:} Proper use of paragraph styles, especially headings\index{Markdown!headings}, is crucial for creating accessible documents in Writer.
	\item \textbf{Export to Tagged PDF:} LibreOffice can export documents to PDF\index{PDF} with accessibility\index{accessibility} tags, which is essential for creating accessible PDFs.
\end{itemize}

\section{External Accessibility Audit Tools}
\label{sec:external-accessibility-audit-tools}

While built-in checkers are a good starting point, a thorough audit requires the use of external tools. These tools can often identify issues that the native checkers miss and provide a more comprehensive analysis.

\subsection{Tools for Desktop Applications (Microsoft Office, LibreOffice)}
\label{sub:tools-for-desktop-applications-microsoft-office-libreoffice}

For documents created in desktop applications\index{PDF!desktop applications}, the audit often involves checking the source document and the exported formats, such as PDF\index{PDF}.

\subsubsection{Commercial Tools}
\label{sub:commercial-tools}

\begin{itemize}
	\item \textbf{axesWord and axesPDF:} These are powerful plugins for Microsoft Word\index{PDF!Microsoft Word} and Adobe Acrobat, respectively, that provide advanced accessibility\index{accessibility} checking and remediation capabilities, going far beyond the built-in checkers.
	\item \textbf{CommonLook Office and CommonLook PDF:} Similar to the axes tools, these provide comprehensive solutions for creating, checking, and repairing accessible documents and PDFs.
\end{itemize}

\subsubsection{Open-Source Tools}
\label{sub:open-source-tools}

\begin{itemize}
	\item \textbf{PDF Accessibility Checker (PAC):} A free tool for checking the accessibility of PDF files against the PDF/UA (Universal Accessibility) standard. It is an essential tool for auditing exported PDFs from any office suite.
	\item \textbf{NVDA (NonVisual Desktop Access):} A free and open-source screen reader\index{screen reader} for Windows. Manually testing a document with NVDA\index{accessibility!NVDA} is one of the most effective ways to understand the user experience for screen reader\index{screen reader} users.
\end{itemize}

\subsection{Tools for Web-based Applications (Google Workspace)}
\label{sub:tools-for-web-based-applications-google-workspace}

For web-based suites, the audit can be performed directly within the browser using various extensions and developer tools.

\subsubsection{Commercial Tools}
\label{sub:commercial-tools-1}

\begin{itemize}
	\item \textbf{axe DevTools:} A browser extension that provides powerful automated accessibility testing\index{accessibility!accessibility testing}, including checks for ARIA implementation, color contrast\index{accessibility!Manual Testing}, and more.
	\item \textbf{WAVE (Web Accessibility Evaluation Tool):} While primarily for websites, the WAVE browser extension can be used to evaluate the accessibility of the user interface of web applications like Google Docs\index{office suite!Google Workspace}.
	\item \textbf{Deque axe Auditor:} A comprehensive platform for conducting full accessibility\index{accessibility} audits, suitable for large-scale assessments of web applications.
\end{itemize}

\subsubsection{Open-Source Tools}
\label{sub:open-source-tools-1}

\begin{itemize}
	\item \textbf{Lighthouse:} An open-source, automated tool integrated into Chrome DevTools. It includes an accessibility audit that provides a score and a list of issues.
	\item \textbf{Accessibility Insights for Web:} A browser extension from Microsoft\index{tablet!Microsoft} that helps developers find and fix accessibility\index{accessibility} issues in web apps and sites.
	\item \textbf{Screen Readers (NVDA, JAWS, VoiceOver\index{screen reader!VoiceOver}):} As with desktop applications, manual testing with screen readers is indispensable. For web applications, it is important to test with multiple screen readers\index{screen reader} and browsers to ensure broad compatibility.
\end{itemize}

\subsection{Manual Testing Tools (Screen Readers and Automation Drivers)}
\label{sub:manual-testing-tools-screen-readers-and-automation-drivers}

Automated tools can only catch a fraction of accessibility issues. Manual testing is critical for evaluating aspects like:

\begin{itemize}
	\item \textbf{Logical Reading Order\index{PDF!reading order}:} Does the screen reader navigate through the content in a logical sequence?
	\item \textbf{Keyboard Accessibility:} Can all interactive elements be reached and operated using only the keyboard?
	\item \textbf{Quality of Alt Text\index{images and media!alternative text}:} Is the alternative text for images meaningful and descriptive?
	\item \textbf{Clarity of Link Text:} Are links understandable\index{accessibility!accessibility principles} out of context?
	\item \textbf{Usability:} Beyond technical compliance\index{accessibility!legal accessibility}, is the document actually usable and easy to navigate for a screen reader user?
\end{itemize}

\section{Common Screen Reader Accessibility Failures and Remediation}
\label{sec:common-screen-reader-accessibility-failures-and-remediation}

During an audit, you will likely encounter a set of recurring accessibility issues. This section details some of the most common failures and how
to remediate them.

\subsection{Missing or Incorrect Headings}
\label{sub:missing-or-incorrect-headings}

\begin{itemize}
	\item \textbf{Failure:} Using bold\index{Markdown!text emphasis} or large text to create the appearance of a heading instead of using the built-in heading styles. This prevents screen readers from identifying the document's structure, making navigation difficult.
	\item \textbf{Remediation:} Apply the appropriate heading levels\index{web accessibility!heading levels} (Heading 1, Heading 2, etc.) sequentially. Ensure there is only one Heading 1 per document (usually the title).
\end{itemize}

\subsection{Missing or Low-Quality Alternative Text (Alt Text) for Images and Objects}
\label{sub:missing-or-low-quality-alternative-text-alt-text-for-images-and-objects}

\begin{itemize}
	\item \textbf{Failure:} Images having no alt text, or alt text that is not descriptive (e.g., "image1.png"). Decorative images should be marked as such so that screen readers\index{screen reader} can ignore them.
	\item \textbf{Remediation:} Write concise, descriptive alt text for all informative images. For complex images like charts or graphs, provide a longer description in the surrounding text and a brief summary in the alt text\index{images and media!alternative text}. Mark purely decorative images as decorative (e.g., by using empty alt text `alt=""` in HTML or the "Mark as Decorative" option in Office).
\end{itemize}

\subsection{Inaccessible Tables}
\label{sub:inaccessible-tables}

\begin{itemize}
	\item \textbf{Failure:} Using tables for layout purposes, or data tables that do not have properly defined headers. Without header information, a screen reader user will hear a series of data cells without context.
	\item \textbf{Remediation:} Use tables only for tabular data. In the table properties, specify the header row (and column, if applicable). For complex tables with merged cells, consider simplifying the table or providing a text summary.
\end{itemize}

\subsection{Non-Descriptive Links}
\label{sub:non-descriptive-links}

\begin{itemize}
	\item \textbf{Failure:} Using generic link text such as "Click Here" or "Read More." Screen reader users often navigate by listing links, and such generic phrases provide no context.
	\item \textbf{Remediation:} The link text should accurately describe the destination of the link. For example, instead of "Click here for the report," use "Read the 2023 Accessibility Report\index{PDF!accessibility report}."
\end{itemize}

\subsection{Improper Reading/Tab Order (Especially in Presentations)}
\label{sub:improper-reading-tab-order-especially-in-presentations}

\begin{itemize}
	\item \textbf{Failure:} In presentations (like PowerPoint or Google Slides\index{office suite!Google Workspace}), objects on a slide may be read in an illogical order if they were not added to the slide in the correct sequence.
	\item \textbf{Remediation\index{accessibility!remediation strategies}:} Use the Selection Pane (in PowerPoint) or a similar feature to check and adjust the reading order\index{PDF!reading order} of objects on each slide. Ensure the order flows logically from top to bottom, left to right.
\end{itemize}

\subsection{Insufficient Color Contrast}
\label{sub:insufficient-color-contrast}

\begin{itemize}
	\item \textbf{Failure:} Text color and background color not having a high enough contrast ratio, making it difficult for users with low vision or color blindness to read.
	\item \textbf{Remediation:} Use a color contrast\index{accessibility!Manual Testing} checker tool to ensure that the contrast ratio between text and its background meets WCAG\index{WCAG} AA standards (4.5:1 for normal text, 3:1 for large text).
\end{itemize}

\subsection{Improperly Formatted Lists\index{accessibility!improperly formatted lists}}
\label{sub:improperly-formatted-lists}

\begin{itemize}
	\item \textbf{Failure:} Creating lists\index{Markdown!lists} by manually typing numbers or asterisks instead of using the built-in bulleted or numbered list features.
	\item \textbf{Remediation:} Always use the dedicated list formatting tools. This ensures that screen readers\index{screen reader} announce the list and the number of items, providing important structural context to the user.
\end{itemize}

\section{Conclusion}
\label{sec:conclusion}

Conducting a comprehensive accessibility audit\index{accessibility!accessibility testing} of an office suite requires a multi-faceted approach. It involves understanding accessibility\index{accessibility} standards, leveraging both built-in and external tools, and performing thorough manual testing with assistive technologies\index{assistive technology}. By systematically identifying and remediating common failures, you can significantly improve the accessibility\index{accessibility} of documents for screen reader\index{screen reader} users, ensuring that digital content is truly inclusive. This process not only aids in legal compliance\index{accessibility!legal accessibility} but also fosters a more equitable digital environment for everyone.
